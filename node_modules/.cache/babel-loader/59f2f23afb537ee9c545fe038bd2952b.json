{"ast":null,"code":"import { hackerNewsSearchActionTypes } from '../constants';\nimport cloneDeep from 'clone-deep';\nconst initialState = {\n  hackerNewsSearchData: []\n};\n\nconst hackerNewsSearchReducer = (state = initialState, action) => {\n  const newState = cloneDeep(state);\n\n  switch (action.type) {\n    case hackerNewsSearchActionTypes.FETCH_SEARCH_REQUEST:\n      {\n        return { ...newState,\n          loading: true\n        };\n      }\n\n    case hackerNewsSearchActionTypes.FETCH_SEARCH_SUCCESS:\n      {\n        newState.loading = false;\n        newState.hackerNewsSearchData = action.payload;\n        return newState;\n      }\n\n    case hackerNewsSearchActionTypes.FETCH_SEARCH_ERROR:\n      {\n        return { ...newState,\n          loading: true,\n          errors: action.payload\n        };\n      }\n\n    default:\n      return newState;\n  }\n};\n\nexport default hackerNewsSearchReducer;","map":{"version":3,"sources":["/home/deepak/Documents/dk/HackerNewsReactHooks/src/store/search/reducer.js"],"names":["hackerNewsSearchActionTypes","cloneDeep","initialState","hackerNewsSearchData","hackerNewsSearchReducer","state","action","newState","type","FETCH_SEARCH_REQUEST","loading","FETCH_SEARCH_SUCCESS","payload","FETCH_SEARCH_ERROR","errors"],"mappings":"AAAA,SAASA,2BAAT,QAA4C,cAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,oBAAoB,EAAE;AADL,CAArB;;AAIA,MAAMC,uBAAuB,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAChE,QAAMC,QAAQ,GAAGN,SAAS,CAACI,KAAD,CAA1B;;AACA,UAAQC,MAAM,CAACE,IAAf;AACE,SAAKR,2BAA2B,CAACS,oBAAjC;AAAuD;AACrD,eAAO,EAAE,GAAGF,QAAL;AAAeG,UAAAA,OAAO,EAAE;AAAxB,SAAP;AACD;;AACD,SAAKV,2BAA2B,CAACW,oBAAjC;AAAuD;AACrDJ,QAAAA,QAAQ,CAACG,OAAT,GAAmB,KAAnB;AACAH,QAAAA,QAAQ,CAACJ,oBAAT,GAAgCG,MAAM,CAACM,OAAvC;AACA,eAAOL,QAAP;AACD;;AACD,SAAKP,2BAA2B,CAACa,kBAAjC;AAAqD;AACnD,eAAO,EAAE,GAAGN,QAAL;AAAeG,UAAAA,OAAO,EAAE,IAAxB;AAA8BI,UAAAA,MAAM,EAAER,MAAM,CAACM;AAA7C,SAAP;AACD;;AACD;AACE,aAAOL,QAAP;AAbJ;AAeD,CAjBD;;AAmBA,eAAeH,uBAAf","sourcesContent":["import { hackerNewsSearchActionTypes } from '../constants';\nimport cloneDeep from 'clone-deep';\n\nconst initialState = {\n    hackerNewsSearchData: [],\n};\n\nconst hackerNewsSearchReducer = (state = initialState, action) => {\n  const newState = cloneDeep(state);\n  switch (action.type) {\n    case hackerNewsSearchActionTypes.FETCH_SEARCH_REQUEST: {\n      return { ...newState, loading: true };\n    }\n    case hackerNewsSearchActionTypes.FETCH_SEARCH_SUCCESS: {\n      newState.loading = false;\n      newState.hackerNewsSearchData = action.payload;\n      return newState;\n    }   \n    case hackerNewsSearchActionTypes.FETCH_SEARCH_ERROR: {\n      return { ...newState, loading: true, errors: action.payload };\n    }\n    default:\n      return newState;\n  }\n};\n\nexport default hackerNewsSearchReducer;\n"]},"metadata":{},"sourceType":"module"}