{"ast":null,"code":"import { call, all, put, takeLatest } from 'redux-saga/effects';\nimport api from '../../services/index';\nimport { libraryManagementAction } from './actions';\n\nfunction* handleFetchBookList(requets) {\n  const {\n    payload\n  } = requets;\n\n  try {\n    const response = yield call(api.getBooks, payload);\n    yield put(libraryManagementAction.fetchBooksDataSuccess(response.data));\n  } catch (error) {\n    yield put(libraryManagementAction.fetchBooksDataError(error));\n  }\n}\n\nfunction* handlefetchBookDetails(requets) {\n  const {\n    payload\n  } = requets;\n\n  try {\n    yield put({\n      type: 'UPDATE_VOTE_COUNT_SUCCESS',\n      ...payload\n    });\n  } catch (err) {\n    yield put({\n      type: 'UPDATE_VOTE_COUNT_ERROR',\n      ...err\n    });\n  }\n}\n\nfunction* handlefetchEmptyBooksList(requets) {\n  const {\n    payload\n  } = requets;\n\n  try {\n    yield put({\n      type: 'HACKER_NEWS_DELETE_DATA_SUCCESS',\n      ...payload\n    });\n  } catch (err) {\n    yield put({\n      type: 'HACKER_NEWS_DELETE_DATA_ERROR',\n      ...err\n    });\n  }\n}\n\nfunction* handleUserBorrowedBooksList(requets) {\n  const {\n    payload\n  } = requets;\n\n  try {\n    yield put({\n      type: 'HACKER_NEWS_PERSIST_DATA_SUCCESS',\n      ...payload\n    });\n  } catch (err) {\n    yield put({\n      type: 'HACKER_NEWS_PERSIST_DATA_ERROR',\n      ...err\n    });\n  }\n}\n\nexport function* libraryManagementSagas() {\n  yield all([yield takeLatest(libraryManagementAction.FETCH_BOOKS_DATA_REQUEST, handleFetchBookList), yield takeLatest(libraryManagementAction.FETCH_BOOKS_DETAILS_REQUEST, handlefetchBookDetails), yield takeLatest(libraryManagementAction.FETCH_BOOKS_EMPTYLIST_REQUEST, handlefetchEmptyBooksList), yield takeLatest(libraryManagementAction.USER_BORROWED_BOOKS_LIST_REQUEST, handleUserBorrowedBooksList)]);\n}","map":{"version":3,"sources":["/home/deepak/Documents/dk/HackerNewsReactHooks/src/store/home/sagas.js"],"names":["call","all","put","takeLatest","api","libraryManagementAction","handleFetchBookList","requets","payload","response","getBooks","fetchBooksDataSuccess","data","error","fetchBooksDataError","handlefetchBookDetails","type","err","handlefetchEmptyBooksList","handleUserBorrowedBooksList","libraryManagementSagas","FETCH_BOOKS_DATA_REQUEST","FETCH_BOOKS_DETAILS_REQUEST","FETCH_BOOKS_EMPTYLIST_REQUEST","USER_BORROWED_BOOKS_LIST_REQUEST"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,SACEC,uBADF,QAEO,WAFP;;AAIA,UAAUC,mBAAV,CAA8BC,OAA9B,EAAuC;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAcD,OAApB;;AACA,MAAI;AACF,UAAME,QAAQ,GAAG,MAAMT,IAAI,CAACI,GAAG,CAACM,QAAL,EAAeF,OAAf,CAA3B;AACA,UAAMN,GAAG,CAACG,uBAAuB,CAACM,qBAAxB,CAA8CF,QAAQ,CAACG,IAAvD,CAAD,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMX,GAAG,CAACG,uBAAuB,CAACS,mBAAxB,CAA4CD,KAA5C,CAAD,CAAT;AACD;AACF;;AAED,UAAUE,sBAAV,CAAiCR,OAAjC,EAA0C;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAcD,OAApB;;AACA,MAAI;AACF,UAAML,GAAG,CAAC;AAAEc,MAAAA,IAAI,EAAE,2BAAR;AAAqC,SAAGR;AAAxC,KAAD,CAAT;AACD,GAFD,CAEE,OAAOS,GAAP,EAAY;AACZ,UAAMf,GAAG,CAAC;AAAEc,MAAAA,IAAI,EAAE,yBAAR;AAAmC,SAAGC;AAAtC,KAAD,CAAT;AACD;AACF;;AAED,UAAUC,yBAAV,CAAoCX,OAApC,EAA6C;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAcD,OAApB;;AACA,MAAI;AACF,UAAML,GAAG,CAAC;AAAEc,MAAAA,IAAI,EAAE,iCAAR;AAA2C,SAAGR;AAA9C,KAAD,CAAT;AACD,GAFD,CAEE,OAAOS,GAAP,EAAY;AACZ,UAAMf,GAAG,CAAC;AAAEc,MAAAA,IAAI,EAAE,+BAAR;AAAyC,SAAGC;AAA5C,KAAD,CAAT;AACD;AACF;;AAED,UAAUE,2BAAV,CAAsCZ,OAAtC,EAA+C;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAAcD,OAApB;;AACA,MAAI;AACF,UAAML,GAAG,CAAC;AAAEc,MAAAA,IAAI,EAAE,kCAAR;AAA4C,SAAGR;AAA/C,KAAD,CAAT;AACD,GAFD,CAEE,OAAOS,GAAP,EAAY;AACZ,UAAMf,GAAG,CAAC;AAAEc,MAAAA,IAAI,EAAE,gCAAR;AAA0C,SAAGC;AAA7C,KAAD,CAAT;AACD;AACF;;AAED,OAAO,UAAUG,sBAAV,GAAmC;AACxC,QAAMnB,GAAG,CAAC,CACR,MAAME,UAAU,CAACE,uBAAuB,CAACgB,wBAAzB,EAAmDf,mBAAnD,CADR,EAER,MAAMH,UAAU,CAACE,uBAAuB,CAACiB,2BAAzB,EAAsDP,sBAAtD,CAFR,EAGR,MAAMZ,UAAU,CAACE,uBAAuB,CAACkB,6BAAzB,EAAwDL,yBAAxD,CAHR,EAIR,MAAMf,UAAU,CAACE,uBAAuB,CAACmB,gCAAzB,EAA2DL,2BAA3D,CAJR,CAAD,CAAT;AAMD","sourcesContent":["import { call, all, put, takeLatest } from 'redux-saga/effects';\nimport api from '../../services/index';\n\nimport {\n  libraryManagementAction\n} from './actions';\n\nfunction* handleFetchBookList(requets) {\n  const { payload } = requets;\n  try {\n    const response = yield call(api.getBooks, payload);\n    yield put(libraryManagementAction.fetchBooksDataSuccess(response.data));\n  } catch (error) {\n    yield put(libraryManagementAction.fetchBooksDataError(error));\n  }\n}\n\nfunction* handlefetchBookDetails(requets) {\n  const { payload } = requets;\n  try {\n    yield put({ type: 'UPDATE_VOTE_COUNT_SUCCESS', ...payload });\n  } catch (err) {\n    yield put({ type: 'UPDATE_VOTE_COUNT_ERROR', ...err });\n  }\n}\n\nfunction* handlefetchEmptyBooksList(requets) {\n  const { payload } = requets;\n  try {\n    yield put({ type: 'HACKER_NEWS_DELETE_DATA_SUCCESS', ...payload });\n  } catch (err) {\n    yield put({ type: 'HACKER_NEWS_DELETE_DATA_ERROR', ...err });\n  }\n}\n\nfunction* handleUserBorrowedBooksList(requets) {\n  const { payload } = requets;\n  try {\n    yield put({ type: 'HACKER_NEWS_PERSIST_DATA_SUCCESS', ...payload });\n  } catch (err) {\n    yield put({ type: 'HACKER_NEWS_PERSIST_DATA_ERROR', ...err });\n  }\n}\n\nexport function* libraryManagementSagas() {\n  yield all([\n    yield takeLatest(libraryManagementAction.FETCH_BOOKS_DATA_REQUEST, handleFetchBookList),\n    yield takeLatest(libraryManagementAction.FETCH_BOOKS_DETAILS_REQUEST, handlefetchBookDetails),\n    yield takeLatest(libraryManagementAction.FETCH_BOOKS_EMPTYLIST_REQUEST, handlefetchEmptyBooksList),\n    yield takeLatest(libraryManagementAction.USER_BORROWED_BOOKS_LIST_REQUEST, handleUserBorrowedBooksList)\n  ]);\n}"]},"metadata":{},"sourceType":"module"}