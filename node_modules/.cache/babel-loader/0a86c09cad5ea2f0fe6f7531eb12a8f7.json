{"ast":null,"code":"import { call, all, put, takeLatest } from 'redux-saga/effects';\nimport api from '../../services/index';\nimport { hackerNewsActionTypes, hackerNewsVoteCountActionTypes, hackerNewsDeleteActionTypes, hackerNewsUpdatePresistTypes } from '../constants';\n\nfunction* handleFetch(requets) {\n  const {\n    payload\n  } = requets;\n\n  try {\n    const response = yield call(api.searchStories, payload);\n    const hackerNewsGraphData = [];\n    response.data.hits.map(data => hackerNewsGraphData.push({\n      name: data.objectID,\n      uv: data.points,\n      pv: 2400,\n      amt: 2400\n    }));\n    const data = { ...response.data,\n      hackerNewsGraphData\n    };\n    yield put({\n      type: 'FETCH_DATA_SUCCESS',\n      data\n    });\n  } catch (err) {\n    yield put({\n      type: 'FETCH_DATA_ERROR',\n      ...err\n    });\n  }\n}\n\nfunction* handleUpdateVoteCount(requets) {\n  const {\n    payload\n  } = requets;\n\n  try {\n    yield put({\n      type: 'UPDATE_VOTE_COUNT_SUCCESS',\n      ...payload\n    });\n  } catch (err) {\n    yield put({\n      type: 'UPDATE_VOTE_COUNT_ERROR',\n      ...err\n    });\n  }\n}\n\nfunction* handleDeleteData(requets) {\n  const {\n    payload\n  } = requets;\n\n  try {\n    yield put({\n      type: 'HACKER_NEWS_DELETE_DATA_SUCCESS',\n      ...payload\n    });\n  } catch (err) {\n    yield put({\n      type: 'HACKER_NEWS_DELETE_DATA_ERROR',\n      ...err\n    });\n  }\n}\n\nfunction* updatePresistData(requets) {\n  const {\n    payload\n  } = requets;\n  console.log('345345345345', 'i am calling 1', payload);\n\n  try {\n    yield put({\n      type: 'HACKER_NEWS_PERSIST_DATA_SUCCESS',\n      ...payload\n    });\n  } catch (err) {\n    yield put({\n      type: 'HACKER_NEWS_PERSIST_DATA_ERROR',\n      ...err\n    });\n  }\n}\n\nexport function* hackerNewsData() {\n  yield all([yield takeLatest(hackerNewsActionTypes.FETCH_DATA_REQUEST, handleFetch), yield takeLatest(hackerNewsVoteCountActionTypes.UPDATE_VOTE_COUNT_REQUEST, handleUpdateVoteCount), yield takeLatest(hackerNewsDeleteActionTypes.HACKER_NEWS_DELETE_DATA_REQUEST, handleDeleteData), yield takeLatest(hackerNewsUpdatePresistTypes.HACKER_NEWS_PERSIST_DATA_REQUEST, updatePresistData)]);\n}","map":{"version":3,"sources":["/home/deepak/Documents/dk/HackerNewsReactHooks/src/store/home/sagas.js"],"names":["call","all","put","takeLatest","api","hackerNewsActionTypes","hackerNewsVoteCountActionTypes","hackerNewsDeleteActionTypes","hackerNewsUpdatePresistTypes","handleFetch","requets","payload","response","searchStories","hackerNewsGraphData","data","hits","map","push","name","objectID","uv","points","pv","amt","type","err","handleUpdateVoteCount","handleDeleteData","updatePresistData","console","log","hackerNewsData","FETCH_DATA_REQUEST","UPDATE_VOTE_COUNT_REQUEST","HACKER_NEWS_DELETE_DATA_REQUEST","HACKER_NEWS_PERSIST_DATA_REQUEST"],"mappings":"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","sourcesContent":["import { call, all, put, takeLatest } from 'redux-saga/effects';\nimport api from '../../services/index';\n\nimport {  hackerNewsActionTypes , hackerNewsVoteCountActionTypes, hackerNewsDeleteActionTypes, hackerNewsUpdatePresistTypes } from '../constants';\n\nfunction* handleFetch(requets) {\n    const { payload } = requets;\n    try {\n        const response = yield call(api.searchStories, payload);  \n        const hackerNewsGraphData =[];\n        response.data.hits.map((data=>\n           hackerNewsGraphData.push({name: data.objectID, uv: data.points, pv: 2400, amt: 2400})\n        ))\n        const data = {...response.data, hackerNewsGraphData};\n        yield put({ type: 'FETCH_DATA_SUCCESS', data });\n    } catch (err) {\n       yield put({type: 'FETCH_DATA_ERROR', ...err});\n    }\n}\n\nfunction* handleUpdateVoteCount(requets) {\n    const { payload } = requets;\n    try {\n      yield put({ type: 'UPDATE_VOTE_COUNT_SUCCESS', ...payload});\n    } catch (err) {\n      yield put({type: 'UPDATE_VOTE_COUNT_ERROR', ...err});\n    }\n}\n\nfunction* handleDeleteData(requets) {\n  const { payload } = requets;\n   try {\n    yield put({ type: 'HACKER_NEWS_DELETE_DATA_SUCCESS', ...payload});\n  } catch (err) {\n    yield put({type: 'HACKER_NEWS_DELETE_DATA_ERROR', ...err});\n  }\n}\n\nfunction* updatePresistData(requets) {\n  const { payload } = requets;\n   console.log('345345345345', 'i am calling 1', payload);\n   try {\n    yield put({ type: 'HACKER_NEWS_PERSIST_DATA_SUCCESS', ...payload});\n  } catch (err) {\n    yield put({type: 'HACKER_NEWS_PERSIST_DATA_ERROR', ...err});\n  }\n}\n\nexport function* hackerNewsData() {     \n    yield all([\n        yield takeLatest(hackerNewsActionTypes.FETCH_DATA_REQUEST, handleFetch),\n        yield takeLatest(hackerNewsVoteCountActionTypes.UPDATE_VOTE_COUNT_REQUEST, handleUpdateVoteCount), \n        yield takeLatest(hackerNewsDeleteActionTypes.HACKER_NEWS_DELETE_DATA_REQUEST, handleDeleteData),\n        yield takeLatest(hackerNewsUpdatePresistTypes.HACKER_NEWS_PERSIST_DATA_REQUEST, updatePresistData)\n      ]);\n}"]},"metadata":{},"sourceType":"module"}